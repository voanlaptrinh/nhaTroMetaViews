<?php

namespace App\Http\Controllers\Admin;

use App\Helpers\LogHelper;
use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class AdministratorController extends Controller
{
    public function index(Request $request)
    {
        $query = User::query();

        // Lo·∫°i b·ªè user c√≥ role 'nguoi-thue-tro'
        $query->whereDoesntHave('roles', function ($q) {
            $q->where('name', 'nguoi-thue-tro');
        });

        // T√¨m ki·∫øm theo t√™n
        if ($request->filled('name')) {
            $query->where('name', 'like', '%' . $request->name . '%');
        }

        // T√¨m ki·∫øm theo email
        if ($request->filled('email')) {
            $query->where('email', 'like', '%' . $request->email . '%');
        }

        // L·ªçc theo tr·∫°ng th√°i active (0 ho·∫∑c 1)
        if ($request->has('active') && $request->active !== '') {
            $query->where('active', $request->active);
        }

        // üëâ S·∫Øp x·∫øp theo ng√†y t·∫°o m·ªõi nh·∫•t
        $query->orderBy('created_at', 'desc');

        $administractors = $query->paginate(20);

        return view('admin.administractor.index', compact('administractors'));
    }

    public function create()
    {
        
        $roles = Role::where('name', '!=', 'nguoi-thue-tro')->get();
        $user = null;
        return view('admin.administractor.form', compact('roles', 'user'));
    }
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'username' => 'nullable|string|max:255|unique:users',
            'email' => 'required|email|unique:users',
            'password' => 'required|string|min:6',
            'phone' => 'nullable|string',
            'avatar' => 'nullable|image',
            'birthday' => 'nullable|date',
            'cmt_mat_truoc' => 'nullable|image',
            'cmt_mat_sau' => 'nullable|image',
            'cmnd' => 'nullable|string',
            'ho_chieu' => 'nullable|image',
            'gioi_tinh' => 'nullable|string',
            'ngay_cap_cmnd' => 'nullable|string',
            'noi_cap_cmnd' => 'nullable|string',
            'thanh_pho' => 'nullable|string',
            'huyen' => 'nullable|string',
            'xa' => 'nullable|string',
            'address' => 'nullable|string',
            'stk' => 'nullable|string',
            'ngan_hang' => 'nullable|string',
            'nghe_nghiep' => 'nullable|string',
            'noi_lam_viec' => 'nullable|string',
            'ma_van_tay' => 'nullable|string',
            'note' => 'nullable|string',
        ], [
            'name.required' => 'Vui l√≤ng nh·∫≠p h·ªç t√™n.',
            'name.max' => 'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',

            'username.max' => 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'username.unique' => 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.',

            'email.required' => 'Vui l√≤ng nh·∫≠p email.',
            'email.email' => 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.',
            'email.unique' => 'Email ƒë√£ t·ªìn t·∫°i.',

            'password.required' => 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u.',
            'password.min' => 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.',

            'avatar.image' => '·∫¢nh ƒë·∫°i di·ªán ph·∫£i l√† ƒë·ªãnh d·∫°ng h√¨nh ·∫£nh (jpg, png, jpeg).',

            'phone.string' => 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.',

            'birthday.date' => 'Ng√†y sinh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.',

            'cmt_mat_truoc.image' => '·∫¢nh m·∫∑t tr∆∞·ªõc CMND ph·∫£i l√† h√¨nh ·∫£nh.',
            'cmt_mat_sau.image' => '·∫¢nh m·∫∑t sau CMND ph·∫£i l√† h√¨nh ·∫£nh.',
            'ho_chieu.image' => '·∫¢nh h·ªô chi·∫øu ph·∫£i l√† h√¨nh ·∫£nh.',

            'cmnd.string' => 'S·ªë CMND kh√¥ng h·ª£p l·ªá.',
            'gioi_tinh.string' => 'Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá.',
            'ngay_cap_cmnd.string' => 'Ng√†y c·∫•p CMND kh√¥ng h·ª£p l·ªá.',
            'noi_cap_cmnd.string' => 'N∆°i c·∫•p CMND kh√¥ng h·ª£p l·ªá.',

            'thanh_pho.string' => 'T·ªânh/Th√†nh ph·ªë kh√¥ng h·ª£p l·ªá.',
            'huyen.string' => 'Qu·∫≠n/Huy·ªán kh√¥ng h·ª£p l·ªá.',
            'xa.string' => 'Ph∆∞·ªùng/X√£ kh√¥ng h·ª£p l·ªá.',
            'address.string' => 'ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá.',

            'stk.string' => 'S·ªë t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.',
            'ngan_hang.string' => 'T√™n ng√¢n h√†ng kh√¥ng h·ª£p l·ªá.',
            'nghe_nghiep.string' => 'Ngh·ªÅ nghi·ªáp kh√¥ng h·ª£p l·ªá.',
            'noi_lam_viec.string' => 'N∆°i l√†m vi·ªác kh√¥ng h·ª£p l·ªá.',

            'ma_van_tay.string' => 'M√£ v√¢n tay kh√¥ng h·ª£p l·ªá.',
            'note.string' => 'Ghi ch√∫ kh√¥ng h·ª£p l·ªá.',
        ]);

        $user = new User($validated);
        $user->password = Hash::make($request->password);

        $uploadPath = public_path('uploads/users');
        if (!File::exists($uploadPath)) {
            File::makeDirectory($uploadPath, 0755, true);
        }

        if ($request->hasFile('avatar')) {
            $file = $request->file('avatar');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->avatar = 'uploads/users/' . $filename;
        }

        if ($request->hasFile('cmt_mat_truoc')) {
            $file = $request->file('cmt_mat_truoc');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->cmt_mat_truoc = 'uploads/users/' . $filename;
        }

        if ($request->hasFile('cmt_mat_sau')) {
            $file = $request->file('cmt_mat_sau');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->cmt_mat_sau = 'uploads/users/' . $filename;
        }

        if ($request->hasFile('ho_chieu')) {
            $file = $request->file('ho_chieu');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->ho_chieu = 'uploads/users/' . $filename;
        }

        $user->save();
        $user->syncRoles($request->roles);
        LogHelper::ghi('Th√™m Ng∆∞·ªùi qu·∫£n l√Ω m·ªõi b·ªüi. ' . $request->name, 'Qu·∫£n l√Ω', 'Th√™m qu·∫£n l√Ω m·ªõi trong qu·∫£n tr·ªã vi√™n b·ªüi' . Auth::user()->name);
        return redirect()->route('admin.quanly.index')->with('success', 'D·ªØ li·ªáu qu·∫£n l√Ω ƒë√£ ƒë∆∞·ª£c th√™m m·ªõi.');
    }

    public function edit(User $user)
    {
         if ($user->roles()->where('name', 'nguoi-thue-tro')->exists()) {
            return redirect()->back()->with('error', 'C√≥ l·ªói x·∫£y ra');
        }
        $roles = Role::where('name', '!=', 'nguoi-thue-tro')->get();
        return view('admin.administractor.form', compact('user', 'roles'));
    }
    public function update(Request $request, User $user)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'username' => 'nullable|string|max:255|unique:users,username,' . $user->id,
            'email' => 'required|email|unique:users,email,' . $user->id,
            'password' => 'nullable|string|min:6',
            'phone' => 'nullable|string',
            'avatar' => 'nullable|image',
            'birthday' => 'nullable|date',
            'cmt_mat_truoc' => 'nullable|image',
            'cmt_mat_sau' => 'nullable|image',
            'cmnd' => 'nullable|string',
            'ho_chieu' => 'nullable|image',
            'gioi_tinh' => 'nullable|string',
            'ngay_cap_cmnd' => 'nullable|string',
            'noi_cap_cmnd' => 'nullable|string',
            'thanh_pho' => 'nullable|string',
            'huyen' => 'nullable|string',
            'xa' => 'nullable|string',
            'address' => 'nullable|string',
            'stk' => 'nullable|string',
            'ngan_hang' => 'nullable|string',
            'nghe_nghiep' => 'nullable|string',
            'noi_lam_viec' => 'nullable|string',
            'ma_van_tay' => 'nullable|string',
            'note' => 'nullable|string',
        ], [
            'name.required' => 'Vui l√≤ng nh·∫≠p h·ªç t√™n.',
            'name.max' => 'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',

            'username.max' => 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'username.unique' => 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.',

            'email.required' => 'Vui l√≤ng nh·∫≠p email.',
            'email.email' => 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.',
            'email.unique' => 'Email ƒë√£ t·ªìn t·∫°i.',

            'password.min' => 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.',

            'phone.string' => 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.',

            'avatar.image' => '·∫¢nh ƒë·∫°i di·ªán ph·∫£i l√† m·ªôt h√¨nh ·∫£nh.',
            'birthday.date' => 'Ng√†y sinh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.',

            'cmt_mat_truoc.image' => '·∫¢nh m·∫∑t tr∆∞·ªõc CMND ph·∫£i l√† h√¨nh ·∫£nh.',
            'cmt_mat_sau.image' => '·∫¢nh m·∫∑t sau CMND ph·∫£i l√† h√¨nh ·∫£nh.',
            'ho_chieu.image' => '·∫¢nh h·ªô chi·∫øu ph·∫£i l√† h√¨nh ·∫£nh.',

            'cmnd.string' => 'S·ªë CMND kh√¥ng h·ª£p l·ªá.',
            'gioi_tinh.string' => 'Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá.',
            'ngay_cap_cmnd.string' => 'Ng√†y c·∫•p CMND kh√¥ng h·ª£p l·ªá.',
            'noi_cap_cmnd.string' => 'N∆°i c·∫•p CMND kh√¥ng h·ª£p l·ªá.',

            'thanh_pho.string' => 'T·ªânh/Th√†nh ph·ªë kh√¥ng h·ª£p l·ªá.',
            'huyen.string' => 'Qu·∫≠n/Huy·ªán kh√¥ng h·ª£p l·ªá.',
            'xa.string' => 'Ph∆∞·ªùng/X√£ kh√¥ng h·ª£p l·ªá.',
            'address.string' => 'ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá.',

            'stk.string' => 'S·ªë t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.',
            'ngan_hang.string' => 'T√™n ng√¢n h√†ng kh√¥ng h·ª£p l·ªá.',
            'nghe_nghiep.string' => 'Ngh·ªÅ nghi·ªáp kh√¥ng h·ª£p l·ªá.',
            'noi_lam_viec.string' => 'N∆°i l√†m vi·ªác kh√¥ng h·ª£p l·ªá.',

            'ma_van_tay.string' => 'M√£ v√¢n tay kh√¥ng h·ª£p l·ªá.',
            'note.string' => 'Ghi ch√∫ kh√¥ng h·ª£p l·ªá.',
        ]);


        // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi th√¨ hash, n·∫øu kh√¥ng th√¨ b·ªè kh·ªèi validated
        if ($request->filled('password')) {
            $validated['password'] = Hash::make($request->password);
        } else {
            unset($validated['password']); // tr√°nh b·ªã g√°n null
        }
        $user->fill($validated);

        // T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh
        $uploadPath = public_path('uploads/users');
        if (!File::exists($uploadPath)) {
            File::makeDirectory($uploadPath, 0755, true);
        }

        // Upload avatar
        if ($request->hasFile('avatar')) {

            // X√≥a ·∫£nh c≈© n·∫øu c√≥
            if (!empty($user->avatar) && file_exists(public_path($user->avatar))) {
                @unlink(public_path($user->avatar));
            }

            $file = $request->file('avatar');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->avatar = 'uploads/users/' . $filename;
        }

        // Upload CMT m·∫∑t tr∆∞·ªõc
        if ($request->hasFile('cmt_mat_truoc')) {
            if (!empty($user->cmt_mat_truoc) && file_exists(public_path($user->cmt_mat_truoc))) {
                @unlink(public_path($user->cmt_mat_truoc));
            }


            $file = $request->file('cmt_mat_truoc');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->cmt_mat_truoc = 'uploads/users/' . $filename;
        }

        // Upload CMT m·∫∑t sau
        if ($request->hasFile('cmt_mat_sau')) {
            if (!empty($user->cmt_mat_sau) && file_exists(public_path($user->cmt_mat_sau))) {
                @unlink(public_path($user->cmt_mat_sau));
            }


            $file = $request->file('cmt_mat_sau');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->cmt_mat_sau = 'uploads/users/' . $filename;
        }

        // Upload h·ªô chi·∫øu
        if ($request->hasFile('ho_chieu')) {

            if (!empty($user->ho_chieu) && file_exists(public_path($user->ho_chieu))) {
                @unlink(public_path($user->ho_chieu));
            }

            $file = $request->file('ho_chieu');
            $filename = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $file->move($uploadPath, $filename);
            $user->ho_chieu = 'uploads/users/' . $filename;
        }
        $user->save();
        $user->syncRoles($request->roles);
        LogHelper::ghi('C·∫≠p nh·∫≠t qu·∫£n l√Ω m·ªõi b·ªüi. ' . $request->name, 'Qu·∫£n l√Ω', 'C·∫≠p nh·∫≠t trong qu·∫£n tr·ªã b·ªüi' . Auth::user()->name);
        return redirect()->route('admin.quanly.index')->with('success', 'D·ªØ li·ªáu qu·∫£n l√Ω ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
    }


    public function destroy($id)
    {

        $user = User::findOrFail($id);
        // Ki·ªÉm tra n·∫øu user c√≥ role 'nguoi-thue-tro' th√¨ kh√¥ng cho x√≥a
        if ($user->roles()->where('name', 'nguoi-thue-tro')->exists()) {
            return redirect()->back()->with('error', 'C√≥ l·ªói x·∫£y ra');
        }
        $user->delete();
        LogHelper::ghi('X√≥a qu·∫£n l√Ω m·ªõi b·ªüi. ' . $user->name, 'Qu·∫£n l√Ω', 'X√≥a trong qu·∫£n tr·ªã b·ªüi' . Auth::user()->name);
        return redirect()->route('admin.users.index')->with('success', 'X√≥a user th√†nh c√¥ng!');
    }
}
